from telegram import Update, Bot, ParseMode
import logging
from core.functions.triggers import trigger_decorator
from core.types import AdminType, Admin, Stock, Character, User, admin, session
from core.utils import send_async
from core.functions.reply_markup import generate_standard_markup
from enum import Enum
from datetime import datetime, timedelta
import re
from core import regexp
from core.template import fill_char_template


def parse_profile(profile, user_id, date):
        parsed_data = re.search(regexp.profile, profile)
        char = session.query(Character).filter_by(user_id=user_id, date=date).first()
        if char is None:
            char = Character()
            char.user_id = user_id
            char.date = date
            char.castle = str(parsed_data.group(1))
            char.name = str(parsed_data.group(2))
            char.prof = str(parsed_data.group(3))
            char.level = int(parsed_data.group(4))
            char.attack = int(parsed_data.group(5))
            char.defence = int(parsed_data.group(6))
            char.exp = int(parsed_data.group(7))
            char.needExp = int(parsed_data.group(8))
            char.maxStamina = int(parsed_data.group(10))
            char.gold = int(parsed_data.group(11))
            char.donateGold = int(parsed_data.group(12))
            if parsed_data.group(16):
                char.pet = str(parsed_data.group(16))
                char.petLevel = int(parsed_data.group(18))
            session.add(char)
            session.commit()
        return char


def char_update(bot: Bot, update: Update):
    if update.message.date - update.message.forward_date > timedelta(minutes=1):
        send_async(bot, chat_id=update.message.chat.id, text='–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≤—è–ª, –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –ø–æ—Å–≤–µ–∂–µ–π...')
    else:
        char = parse_profile(update.message.text, update.message.from_user.id, update.message.forward_date)
        if char.castle == 'üá≤üá¥':
            send_async(bot, chat_id=update.message.chat.id, text='–†–∞—Å–ø–æ–ª–∞–≥–∞–π—Å—è –≤ –∑–∞—Ä–æ—Å–ª—è—Ö –º—è—Ç—ã, {}!\n'
                                                                 '–ù–µ –∑–∞–±—ã–≤–∞–π –ø–æ–ª–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –≤ –¥–µ–Ω—å. üå±'
                       .format(char.name))
        else:
            send_async(bot, chat_id=update.message.chat.id,
                       text="–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –≤–æ –≤—Å–µ–π –∫—Ä–∞—Å–µ –ø—Ä–µ–¥—Å—Ç–∞–ª–∏ –æ–±—à–∏—Ä–Ω—ã–µ –∑–∞—Ä–æ—Å–ª–∏ –º—è—Ç—ã.  "
                            "–¢—ã –±–µ—Å—Å—Ç—Ä–∞—à–Ω–æ –∑–∞—à—ë–ª –≤ –Ω–∏—Ö, –≤ –Ω–∞–¥–µ–∂–¥–µ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–æ–≤—ã—Ö –∑–µ–º–µ–ª—å. "
                            "–û–¥–Ω–∞–∫–æ –¥–æ–ª–≥–∏–µ —á–∞—Å—ã —Å–∫–∏—Ç–∞–Ω–∏–π –Ω–µ –ø—Ä–∏–≤–µ–ª–∏ —Ç–µ–±—è –Ω–∏ –∫ —á–µ–º—É. "
                            "–ü–æ–≤–µ–∑–ª–æ —Ö–æ—Ç—å, —á—Ç–æ –≤—ã–±—Ä–∞—Ç—å—Å—è —Å–º–æ–≥! –ë–µ–∑ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞ –∑–¥–µ—Å—å –¥–µ–ª–∞—Ç—å –Ω–µ—á–µ–≥–æ...")


def char_show(bot: Bot, update: Update):
    if update.message.chat.type == 'private':
        user = session.query(User).filter_by(id=update.message.from_user.id).first()
        if user is not None and user.character is not None:
            char = sorted(user.character, key=lambda x: x.date, reverse=True)[0]
            if char.castle == 'üá≤üá¥':
                text = 'üë§ %first_name% (%username%)\n' \
                       '%castle% %name%\n' \
                       'üèÖ %prof% %level% —É—Ä–æ–≤–Ω—è\n' \
                       '‚öúÔ∏è –û—Ç—Ä—è–¥ <–í –†–ê–ó–†–ê–ë–û–¢–ö–ï>\n' \
                       '‚öîÔ∏è %attack% | üõ° %defence% | üî• %exp%/%needExp%\n' \
                       'üí∞ %gold% | üîã %maxStamina%\n' \
                       'üïë –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ %date%'
                text = fill_char_template(text, user, char)
                send_async(bot, chat_id=update.message.chat.id, text=text)
